name: main Workflow

on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
            java-version: '17'
            distribution: 'adopt'

      - name: Set .yml for main
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.MAIN_DATABASE_YML }}" | base64 --decode > src/main/resources/application.yml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test

      ## 웹 이미지 빌드 및 도커허브에 push
      - name: web docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/meme-service .
          docker push ${{ secrets.DOCKER_REPO }}/meme-service    

      - name: EC2 docker remove
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          script: |
            if [ "$(sudo docker ps -aq)" ]; then
              sudo docker stop $(sudo docker ps -aq)
              sudo docker rm -f $(sudo docker ps -aq)
            fi
            if [ "$(sudo docker images -aq)" ]; then
              sudo docker rmi -f $(sudo docker images -aq)
            fi

      ## docker compose up
      - name: Docker Run on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          script: |
            # Docker 이미지 다운로드
            sudo docker pull ${{ secrets.DOCKER_REPO }}/meme-service
            docker run -d --rm --name server -p 8080:8080 ${{ secrets.DOCKER_REPO }}/meme-service
                    
            # Docker Compose 실행
            # sudo docker-compose up -d
            # sudo docker-compose logs -f
            
            # 사용하지 않는 Docker 이미지 정리
            sudo docker image prune -f