name: main Workflow

on:
  push:
    branches:
      - ci/#80
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
            java-version: '17'
            distribution: 'adopt'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test

      ## 웹 이미지 빌드 및 도커허브에 push
      - name: web docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_REPO }}/meme-service .
          docker push ${{ secrets.DOCKER_REPO }}/meme-service    

      - name: Install Docker on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          script: |
            if ! apt list --upgradable 2>/dev/null | grep -q "upgradable"; then
              sudo apt update -y
            fi
            if ! command -v docker &> /dev/null; then
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            else
              echo "Docker is already installed"
            fi
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

      - name: EC2 docker remove
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          script: |
            if [ "$(sudo docker ps -aq)" ]; then
              sudo docker stop $(sudo docker ps -aq)
              sudo docker rm -f $(sudo docker ps -aq)
            fi
            if [ "$(sudo docker images -aq)" ]; then
              sudo docker rmi -f $(sudo docker images -aq)
            fi

      - name: Copy file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          source: ./docker-compose.yaml
          target: /home/ubuntu/

      - name: Create and Copy .env File to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          script: |
            # Create .env file
            echo "DB_URL=${{ secrets.DB_URL }}" > ~/.env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> ~/.env
            echo "DB_PASS=${{ secrets.DB_PASS }}" >> ~/.env            

            # Copy .env file to the project directory
            #cp ~/.env /home/ubuntu/.env

      ## docker compose up
      - name: Docker Compose on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.KEY }}
          script: |
            # Docker 이미지 다운로드
            sudo docker pull ${{ secrets.DOCKER_REPO }}/meme-service
#            sudo docker pull ${{ secrets.DOCKER_REPO }}/mappin-nginx
            
            # Docker Compose 실행
            sudo docker-compose up -d
            sudo docker-compose logs -f
            
            # 사용하지 않는 Docker 이미지 정리
            sudo docker image prune -f